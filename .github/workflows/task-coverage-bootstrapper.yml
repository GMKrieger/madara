name: Task - Bootstrapper Coverage

# This workflow runs integration tests and generates code coverage
# reports for the Madara codebase
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      madara-binary-hash:
        description: "Hash used to retrieve the artifact"
        required: true
        type: string
      bootstrapper-artifacts-hash:
        description: "Hash used to retrieve the artifact"
        required: true
        type: string
    secrets:
      ETH_FORK_URL:
        required: true
      GITHUB_GATEWAY_KEY:
        required: false

jobs:
  test-with-coverage-bootstrapper:
    permissions:
      pull-requests: write
    runs-on: karnot-arc-runner-set
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup the environment with all necessary dependencies
      - uses: ./.github/actions/load-env

      # Setup the rust environment
      - uses: ./.github/actions/rust-setup
        with:
          # Uses the dev cache key as we are using the --profile dev later
          cache-key: COVERAGE
          rust-version: ${{ env.BUILD_RUST_VERSION }}
          scarb-version: ${{ env.BUILD_SCARB_VERSION }}
          install-mold: true
          install-scarb: true
          install-foundry: true
          foundry-version: stable
          python-version: ${{ env.BUILD_PYTHON_VERSION }}
          build-snos: true
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Ganache
        run: |
          npm install -g ganache@7.9.0
          ganache --version

      - name: Install Solc
        run: |
          pip install solc-select
          solc-select install 0.8.19
          solc-select use 0.8.19
          solc --version

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Install nextest
        uses: taiki-e/install-action@nextest
      - name: Download Madara binary
        uses: actions/download-artifact@v4
        with:
          name: madara-binary-${{ inputs.madara-binary-hash }}
          path: target/release/
      - name: Make Madara binary executable
        run: chmod +x target/release/madara

      - name: Prepare Madara Environment (Bootstrapper)
        run: |
          mv target/release/madara ./madara-binary          
          echo "MADARA_BOOTSTRAPPER_MADARA_BINARY_PATH=$(pwd)/madara-binary" >> $GITHUB_ENV
          echo "Binary path: $(pwd)/madara-binary"
      - name: Download Bootstrapper artifacts
        uses: actions/download-artifact@v4
        with:
          name: bootstrapper-artifacts-${{ inputs.bootstrapper-artifacts-hash }}
          path: artifacts
      - name: Locate and move config file
        run: |
          echo "Current directory: $(pwd)"

          # Find all devnet.yaml files in the repository
          echo "Searching for devnet.yaml files..."
          FOUND_FILES=$(find /home/runner/_work/madara -name "devnet.yaml" -type f)
          echo "Found files:"
          echo "$FOUND_FILES"

          # Create target directory if it doesn't exist
          mkdir -p configs/presets/


            FIRST_FILE=$(echo "$FOUND_FILES" | head -n 1)
            echo "Copying $FIRST_FILE to configs/presets/devnet.yaml"
            cp "$FIRST_FILE" configs/presets/devnet.yaml
            echo "Verifying copy:"
            ls -la configs/presets/devnet.yaml

      - name: Start Anvil with fork
        run: |
          nohup anvil \
            --code-size-limit 300000 \
            --port ${{ env.ANVIL_DEFAULT_PORT }} &

          # Store the PID for later cleanup
          echo "ANVIL_PID=$!" >> $GITHUB_ENV

          # Wait for Anvil to start
          echo "Waiting for Anvil to start..."
          timeout 30s bash -c 'until curl -s -X POST --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_chainId\",\"params\":[],\"id\":1}" -H "Content-Type: application/json" ${{ env.ANVIL_DEFAULT_URL }} &>/dev/null; do sleep 2; echo "Retrying..."; done'

          if [ $? -eq 0 ]; then
            echo "Anvil is running in url: ${{ env.ANVIL_DEFAULT_URL }}"
          else
            echo "Failed to connect to Anvil within timeout"
            exit 1
          fi

      - name: Run tests with coverage
        continue-on-error: false
        run: |
          export COVERAGE_BIN=$(realpath target/release/madara-bootstrapper)
          rm -f target/madara-bootstrapper-* lcov.info

          # run tests for bootstrapper crate
          cargo llvm-cov nextest \
                  --release \
                  --lcov \
                  --output-path lcov.info \
                  --package "madara-bootstrapper" \
                  --no-fail-fast

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true
          files: lcov.info
          debug: true
