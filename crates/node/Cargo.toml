[package]
authors = [
  "KSS <@keep-starknet-strange>",
  "Kasar <@kasarLabs>",
  "Substrate @substrate-developer-hub",
]
build = "build.rs"
description = "Deoxys node."
edition.workspace = true
homepage = "https://github.com/kasarlabs/deoxys"
license = "MIT"
name = "deoxys"
publish = false
repository = "https://github.com/kasarlabs/deoxys"
version.workspace = true

  [package.metadata.docs.rs]
  targets = ["x86_64-unknown-linux-gnu"]

[[bin]]
name = "deoxys"

[dependencies]
# Ethereum
ethers = { workspace = true, features = ["openssl"] }

async-trait = "0.1"
clap = { workspace = true, features = ["derive"] }
futures = { workspace = true, features = ["thread-pool"] }
lazy_static = { workspace = true }
log = { workspace = true }
md5 = { workspace = true }
serde = { workspace = true }
tokio = { workspace = true }

frame-system = { workspace = true }
sc-basic-authorship = { workspace = true }
sc-cli = { workspace = true }
sc-client-api = { workspace = true }
sc-consensus = { workspace = true }
sc-consensus-aura = { workspace = true }
sc-consensus-grandpa = { workspace = true }
sc-consensus-manual-seal = { workspace = true }
sc-executor = { workspace = true }
sc-keystore = { workspace = true }
sc-network = { workspace = true }
sc-network-sync = { workspace = true }
sc-offchain = { workspace = true }
sc-service = { workspace = true }
sc-telemetry = { workspace = true }
sc-transaction-pool = { workspace = true }
sc-transaction-pool-api = { workspace = true }
sp-consensus-aura = { workspace = true }
sp-consensus-grandpa = { workspace = true }
sp-core = { workspace = true }
sp-inherents = { workspace = true }
sp-keyring = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-state-machine = { workspace = true }
sp-statement-store = { workspace = true }
sp-timestamp = { workspace = true }
sp-trie = { workspace = true, features = ["default"] }

# These dependencies are used for the node template's RPCs
jsonrpsee = { workspace = true, features = ["server"] }

# Substrate primitives dependencies
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
sp-blockchain = { workspace = true }
# Substrate client dependencies
prometheus-endpoint = { workspace = true }
sc-rpc-api = { workspace = true }
# Substrate frame dependencies
# no substrate frame pallet dependencies for now

# Substrate tools dependencies
substrate-frame-rpc-system = { workspace = true }
# These dependencies are used for runtime benchmarking
frame-benchmarking = { workspace = true }
frame-benchmarking-cli = { workspace = true }

# Starknet
blockifier = { workspace = true }
hex = { workspace = true }
madara-runtime = { workspace = true }
mc-commitment-state-diff = { workspace = true }
mc-db = { workspace = true }
mc-l1-messages = { workspace = true }
mc-mapping-sync = { workspace = true }
mc-rpc = { workspace = true }
mc-settlement = { workspace = true, features = ["clap"] }
mc-storage = { workspace = true }
pallet-starknet = { workspace = true }
pallet-starknet-runtime-api = { workspace = true }
starknet-core = { workspace = true }
starknet_api = { workspace = true, features = [
  "parity-scale-codec",
  "scale-info",
] }

# Madara utils
mc-genesis-data-provider = { workspace = true }

bincode = "1.3"
mockito = { workspace = true }
serde_json = "1.0.64"
# Primitives
mp-block = { workspace = true }
mp-contract = { workspace = true }
mp-digest-log = { workspace = true }
mp-felt = { workspace = true }
mp-hashers = { workspace = true }
mp-sequencer-address = { workspace = true, features = ["client"] }
mp-transactions = { workspace = true, features = ["scale-info"] }

# CLI-specific dependencies
try-runtime-cli = { optional = true, git = "https://github.com/paritytech/polkadot-sdk", branch = "release-polkadot-v1.3.0" }

#Deoxys
mc-deoxys = { workspace = true }
parity-scale-codec = { workspace = true, features = ["derive"] }
reqwest = { workspace = true }
url = { workspace = true }

[build-dependencies]
substrate-build-script-utils = { workspace = true }

[features]
default = []
# Dependencies that are only required if runtime benchmarking should be build.
runtime-benchmarks = [
  "frame-benchmarking-cli/runtime-benchmarks",
  "frame-benchmarking/runtime-benchmarks",
  "madara-runtime/runtime-benchmarks",
]
# Enable features that allow the runtime to be tried and debugged. Name might be subject to change
# in the near future.
disable-transaction-fee = ["madara-runtime/disable-transaction-fee"]
try-runtime = ["madara-runtime/try-runtime", "try-runtime-cli/try-runtime"]
# Load sharingan chain-specs during the compilation
# This is the way to run a sharingan chain
sharingan = []
